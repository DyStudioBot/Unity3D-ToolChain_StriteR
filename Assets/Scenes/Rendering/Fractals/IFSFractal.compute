#pragma kernel Main

#include "Assets/Shaders/Library/Common.hlsl"

struct IFSInput
{
    float3x2 transform;
    float contraction;
    float4 color;

    float3x3 GetMatrix()
    {
        return float3x3(transform[0].x,transform[1].x,transform[2].x,
                    transform[0].y,transform[1].y,transform[2].y,
                    0,0,1);
    }
};

StructuredBuffer<IFSInput> _IFSBuffer;

float _Threshold;
RWTexture2D<float4> _Result;
float4 _Result_ST;

float2 Sample(float3x3 _transform, float2 uv)
{
    const int count = 32;
    float2 z = uv;
    for(int i=0;i<count;i++)
    {
        // affine transform
        z = mul(_transform, float3(z,1)).xy;
        // non linear transform
        float an = length(z)*0.25;
        z = 2.0* mul(Rotate2x2(an),z/dot(z,z));
        // float an = length(z)*0.25;
        // z = 2.0* mul(Rotate2x2(an),z/dot(z,z));
    }
    return z;
}

[numthreads(8,8,1)]
void Main(uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy * _Result_ST.xy;
    uv = (uv-.5);

    IFSInput input = _IFSBuffer[0];
    float3x3 transform = input.GetMatrix();
    uv = Sample(transform,uv);

    int2 finalValue = floor(uv*_Result_ST.zw);
    if(finalValue.x<0 || finalValue.x>=_Result_ST.z || finalValue.y<0 || finalValue.y>=_Result_ST.w)
        return;

    float4 col = input.color;
    _Result[finalValue] += float4(col) * .5f;
}
